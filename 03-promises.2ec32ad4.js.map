{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEAD,EAAAE,OAAOC,KAAK,CAAEC,SAAS,IAEvB,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAGzBC,EAAW,GA8BjB,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,GACFI,EAAQ,C,SAAEN,E,MAAUC,IAEtBM,EAAO,C,SAAEP,E,MAAUC,MAClBA,MApCPP,EAAKC,KAAKc,iBAAiB,SAG3B,SAAyBC,GACvBZ,EAASY,EAAIC,OAAOC,MAAQF,EAAIC,OAAOE,SAHzCnB,EAAKC,KAAKc,iBAAiB,UAM3B,SAAuBC,GAErB,GADAA,EAAII,iBACAhB,EAASG,MAAQ,GAAKH,EAASiB,KAAO,GAAKjB,EAASkB,OAAS,EAE/D,YADA3B,EAAAE,OAAO0B,QAAQ,yEAGjB,IAAIC,EAAW,EACXC,EAAQC,OAAOtB,EAASG,OAC5B,IAAK,IAAIoB,EAAI,EAAGA,GAAKvB,EAASkB,OAAQK,IACpCtB,EAAcmB,EAAUC,GACrBG,MAAK,EAACtB,SAAEA,EAAQC,MAACA,MAChBZ,EAAAE,OAAOgC,QAAQ,uBAAqBvB,QAAiBC,UAEtDuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBZ,EAAAE,OAAOkC,QAAQ,sBAAoBzB,QAAeC,UAEtDiB,GAAY,EACZC,GAASC,OAAOtB,EAASiB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nNotify.init({ useIcon: false, })\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nconst formData = {};\n\nrefs.form.addEventListener('input', onInputDataSave);\nrefs.form.addEventListener('submit', onSubmitEvent);\n\nfunction onInputDataSave(evt) {\n  formData[evt.target.name] = evt.target.value;\n};\n\nfunction onSubmitEvent(evt) {\n  evt.preventDefault();\n  if (formData.delay < 0 || formData.step < 0 || formData.amount < 0) {\n    Notify.warning('Please enter a positive number(s)! The smallest possible number is 0.');\n    return;\n  };\n  let position = 1;\n  let delay = Number(formData.delay);\n  for (let i = 1; i <= formData.amount; i++) {\n    createPromise(position, delay)\n      .then(({ position,delay}) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    position += 1;\n    delay += Number(formData.step);\n  };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n};\n"],"names":["$iQIUW","parcelRequire","Notify","init","useIcon","$47d4ff9957288465$var$refs","form","document","querySelector","$47d4ff9957288465$var$formData","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","target","name","value","preventDefault","step","amount","warning","position1","delay1","Number","i","then","success","catch","failure"],"version":3,"file":"03-promises.2ec32ad4.js.map"}